services:
  # Database setup service - runs once to initialize database and directories
  db-setup:
    build: .
    container_name: gatus-db-setup
    volumes:
      - gatus-data:/data
      - ./scripts:/scripts:ro
    environment:
      - GATUS_LOG_LEVEL=INFO
    user: "1000:1000"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Setting up database environment..."
        mkdir -p /data/backups
        chmod 750 /data/backups

        # Create initial database if it doesn't exist
        if [ ! -f /data/gatus.db ]; then
          echo "Creating initial SQLite database..."
          sqlite3 /data/gatus.db "
            PRAGMA journal_mode=WAL;
            PRAGMA synchronous=NORMAL;
            PRAGMA foreign_keys=ON;
            PRAGMA temp_store=MEMORY;
            PRAGMA cache_size=10000;
            SELECT 'Database initialized successfully';
          "
          chmod 640 /data/gatus.db
          echo "Database created with secure permissions"
        else
          echo "Database already exists at /data/gatus.db"
        fi

        # Optimize database if it exists
        echo "Optimizing database..."
        sqlite3 /data/gatus.db "
          PRAGMA optimize;
          VACUUM;
          ANALYZE;
        "

        echo "Database setup completed successfully!"
    profiles:
      - setup

  # Main Gatus application service
  gatus:
    build: .
    container_name: gatus-bct-monitor
    depends_on:
      db-setup:
        condition: service_completed_successfully
        required: false
    ports:
      - "80:8080"
    volumes:
      - ./config.yaml:/config/config.yaml:ro
      - gatus-data:/data
      - ./scripts:/scripts:ro
    environment:
      - GATUS_LOG_LEVEL=INFO
      - PORT=8080
      - GATUS_CONFIG_PATH=/config/config.yaml
      - GATUS_DATABASE_PATH=/data/gatus.db
      - TELEGRAM_BOT_TOKEN=7524746512:AAEpWqB9b0JJ32Fl5SG3M92UkGReEmtw8vg
      - TELEGRAM_CHAT_ID=407303553
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    restart: unless-stopped
    networks:
      - gatus-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database backup service - runs periodically
  db-backup:
    build: .
    container_name: gatus-db-backup
    volumes:
      - gatus-data:/data
      - ./scripts:/scripts:ro
    environment:
      - GATUS_LOG_LEVEL=INFO
    user: "1000:1000"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Starting database backup service..."
        while true; do
          echo "Running scheduled backup..."
          if [ -f /data/gatus.db ]; then
            timestamp=$$(date +"%Y%m%d_%H%M%S")
            backup_file="/data/backups/gatus_backup_$${timestamp}.db"
            
            # Create backup using SQLite backup command
            sqlite3 /data/gatus.db ".backup '$${backup_file}'"
            
            # Compress backup
            gzip "$${backup_file}"
            chmod 640 "$${backup_file}.gz"
            
            # Clean old backups (keep last 30 days)
            find /data/backups -name "gatus_backup_*.db.gz" -mtime +30 -delete
            
            backup_size=$$(du -h "$${backup_file}.gz" 2>/dev/null | cut -f1 || echo "unknown")
            echo "Backup completed: $${backup_file}.gz (Size: $${backup_size})"
          else
            echo "Database file not found, skipping backup"
          fi
          
          # Wait 24 hours before next backup
          sleep 86400
        done
    profiles:
      - backup
    restart: unless-stopped

  # Telegram Bot Service - Interactive bot for monitoring commands
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.telegram-bot
    container_name: gatus-telegram-bot
    depends_on:
      - gatus
    volumes:
      - telegram-logs:/logs
    environment:
      - TELEGRAM_BOT_TOKEN=7524746512:AAEpWqB9b0JJ32Fl5SG3M92UkGReEmtw8vg
      - TELEGRAM_CHAT_ID=407303553
      - GATUS_API_URL=http://gatus:8080
    restart: unless-stopped
    networks:
      - gatus-network
    healthcheck:
      test:
        [
          "CMD",
          "python3",
          "-c",
          "import requests; requests.get('https://api.telegram.org/bot' + __import__('os').getenv('TELEGRAM_BOT_TOKEN') + '/getMe', timeout=5)",
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  gatus-network:
    driver: bridge
    name: gatus-network

volumes:
  gatus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  telegram-logs:
    driver: local
